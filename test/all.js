'use strict'

var util = require('util');
var assert = require('assert');
var EvaluatorUtil = require('../ioReactor').EvaluatorUtil;
var EvaluatorUtil = require('../ioReactor').EvaluatorUtil;
var IoEvent = require('../../io-event-reactor-plugin-support').IoEvent;
var IoReactorService = require('../ioReactorService');

var logger = function(severity, origin, message) {
    if (severity != 'verbose') {
        console.log(severity + ' ' + origin + ' ' + message);
    }
};

var errorCallback = function(message,error) {
    console.log("ERROR-CALLBACK! " + message + ' ' + error);
};

/**
* Generates a IoEventService configuration based around a MockMonitorPlugin
*
* @param ioEventsReactedTo array that the 'code1' reactor will add IoEvents to it receives as evidence the 'code1' reactor was triggered
* @param evaluatorFunction - evaluator function that will gate the mock IoEvents triggered via 'monitorTriggerConfigs' and let them flow (or not) to the code1 reactor
* @param monitorTriggerConfigs array of MockMonitorPlugin monitorTrigger config objects, these trigger fake IoEvents through the IoReactor frameworks
*/
function generateMockConfig(ioEventsReactedTo, evaluatorFunction, monitorTriggerConfigs) {

    return {
            logFunction: logger,
            errorCallback: errorCallback,

            ioReactors: [

                  {
                      id: "ioReactor-test1",

                      // mock monitor, will trigger mocked IoEvents according to monitorTriggerConfigs
                      monitor: {
                          plugin: "./test/mockMonitor",
                          config: {
                              monitorTriggers: monitorTriggerConfigs
                          }
                      },

                      // evaluators, we have one that will gate the fake IoEvents
                      // generated by monitorTriggerConfigs
                      evaluators: [
                          {
                              evaluator: evaluatorFunction,
                              reactors: ['code1','logger1']
                          }
                      ],

                      // reactors, we have 2, code1 which will place the ioEvent
                      // triggered by monitorTriggerConfigs in ioEventResultMap so that
                      // its existence can be asserted by the test. The other one is just a logger
                      reactors: [

                          { id: "code1",
                            plugin: "./default_plugins/code/codeReactorPlugin",
                            config: {
                                codeFunction: function(ioEvent) {
                                    return new Promise(function(resolve,reject) {
                                        ioEventsReactedTo.push(ioEvent);
                                        resolve(true);
                                    });
                                }
                            }
                          },

                          { id: "logger1",
                            plugin: "./default_plugins/logger/loggerReactorPlugin" }
                      ]

                  }

             ]
        };
};



describe('core-test', function() {

    it('Start a mock monitor, validate that a few simple events pass the monitor -> evaluator -> reactor engine flow', function(done) {

        this.timeout(5000);

        // global array where the code1 reactor will place ioEvents it receives
        var ioEventsReactedTo = [];


        var mockConfig = generateMockConfig(ioEventsReactedTo,
                                            EvaluatorUtil.regex(['add','unlink'],'.*testFile\\d+','ig'),
                                                [
                                                    // generate an add, should react to this
                                                    { eventGenerator: function() {
                                                                       return new IoEvent('add','/tmp/testFile1',{size:100},null);
                                                                      },
                                                      timeout: 100
                                                    },

                                                    // generate an unlink, should react to this
                                                    { eventGenerator: function() {
                                                                       return new IoEvent('unlink','/tmp/testFile1',{size:100},null);
                                                                      },
                                                      timeout: 100
                                                    },

                                                    // generate an unlinkDir, should not react to this
                                                    { eventGenerator: function() {
                                                                       return new IoEvent('unlinkDir','/tmp/testFile1',{size:100},null);
                                                                      },
                                                      timeout: 100
                                                    },

                                                    // generate an change for diff file, should not react to this
                                                    { eventGenerator: function() {
                                                                       return new IoEvent('change','/tmp/testFile1',{size:100},null);
                                                                      },
                                                      timeout: 100
                                                    },

                                                    // generate an add for diff file (letter, not number), should not react to this
                                                    { eventGenerator: function() {
                                                                       return new IoEvent('add','/tmp/testFileA',{size:100},null);
                                                                      },
                                                      timeout: 100
                                                    },

                                                    // generate an add, should react to this
                                                    { eventGenerator: function() {
                                                                       return new IoEvent('add','/tmp/testFile100',{size:100},null);
                                                                      },
                                                      timeout: 100
                                                    },
                                                ]);


        // start the reactor
        var reactor = new IoReactorService(mockConfig);

        // check that ioEventsReactedTo contains 3 reaacted to events...
        setTimeout(function(){
            assert.equal(ioEventsReactedTo.length, 3);
            done();
        },2000);

    });

});
